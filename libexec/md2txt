#!/usr/bin/env node

'use strict';

let fs = require('fs')

let fm = require('front-matter')
let marked = require('marked')
let _ = require('lodash')
let html_decode = require('ent/decode')

let tags_normalize = function(something) {
    return _.uniq([].concat(something)
		  .map( val => val.replace(/\s+/g, ' ').trim())
		  .filter( val => val.length))
}

let frontmatter_strip = function(str) {
    if (!str) return ''

    let r = fm(str)
    let subject = (r.attributes.subject || '') + '\n'
    // maybe we shouldn't include tags in the output?
    let tags = tags_normalize(r.attributes.tags || '')
	.map( val => val.toLowerCase()).join(', ')

    return [subject, tags, r.body].join("\n")
}

let html_strip = function(str) {
    return str.replace(/<(?:.|\n)*?>/gm, '').trim()
}

let md2txt = function(markdown) {
    let renderer = new marked.Renderer();

    // inline
    renderer.text = (text) => html_decode(text)
    renderer.strong = (text) => text
    renderer.em = (text) => text
    renderer.codespan = (code) => html_decode(code)
    renderer.br = () => "\n"
    renderer.del = (text) => text
    renderer.link = (href, title, string) => {
	// string is already html decoded
	title = html_decode(title || '')
	let r = `${string} (${html_decode(href)})`
	if (href === string || string === '') r = html_decode(href)
	if (title) return `${r} (${title})`
	return r
    }
    renderer.image = function(href, title, string) {
	href = html_decode(href)
	title = html_decode(title || '')
	// I thought it would be as in renderer.link() but it's not
	string = html_decode(string)

	let r = `${href} (${string})`
	if (href === string || string === '') r = href
	if (title) return `${r} (${title})`
	return r
    }

    // block
    renderer.code = (code, _lang) => html_decode(code) + "\n\n"
    renderer.blockquote = (quote) => quote
    renderer.html = (html) => {
	// not sure this is what we should do, for <such> strings, for
	// example, are removed; the obvious solution would be to
	// strip out only a known set of html elements.
	return html_strip(html)
    }
    renderer.heading = (text, _level) => text
    renderer.hr = () => "\n"
    renderer.list = (body, _ordered) => body + "\n"
    renderer.listitem = (text) => '* ' + text + "\n"
    renderer.paragraph = (text) => {
	// marked puts a genuine html here, like an img tag with a
	// class attr :(
	return html_strip(text) + "\n\n"
    }
    renderer.tablecell = (content, _flags) => content + '  '
    renderer.tablerow = (content) => content + "\n"
    renderer.table = (header, body) => [header, body].join("\n") + "\n"

    return marked(markdown, { renderer })
}


if (__filename === process.argv[1]) {
    if (process.argv.length !== 3) {
	console.error(`Usage: md2txt file.md`)
	process.exit(1)
    }
    let md = md2txt(frontmatter_strip(fs.readFileSync(process.argv[2]).toString()))
    process.stdout.write(md)
} else {
    exports.md2txt = md2txt
}
